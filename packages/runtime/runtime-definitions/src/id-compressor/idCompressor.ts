/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import {
	SessionSpaceCompressedId,
	OpSpaceCompressedId,
	SessionId,
	FinalCompressedId,
	StableId,
} from "./identifiers";
import {
	IdCreationRange,
	SerializedIdCompressor,
	SerializedIdCompressorWithNoSession,
	SerializedIdCompressorWithOngoingSession,
} from "./persisted-types";

/**
 * This is the set of functions on an IdCompressor that a DDS author shouldn't be concerned with.
 * Operations here are automatically handled at the SharedObject level.
 */
export interface IIdCompressorCore {
	/**
	 * Finalizes the supplied range of IDs (which may be from either a remote or local session).
	 * @param range - the range of session-local IDs to finalize.
	 */
	finalizeCreationRange(range: IdCreationRange): void;

	/**
	 * Returns a range of local IDs created by this session in a format for sending to the server for finalizing.
	 * The range will include all local IDs generated via calls to `generateCompressedId` since the last time this method was called.
	 * @returns the range of session-local IDs, which may be empty. This range must be sent to the server for ordering before
	 * it is finalized. Ranges must be sent to the server in the order that they are taken via calls to this method.
	 */
	takeNextCreationRange(): IdCreationRange;

	/**
	 * Returns a persistable form of the current state of this `IdCompressor` which can be rehydrated via `IdCompressor.deserialize()`.
	 * This includes finalized state as well as un-finalized state and is therefore suitable for use in offline scenarios.
	 */
	serialize(
		withSession: boolean,
	): SerializedIdCompressorWithOngoingSession | SerializedIdCompressorWithNoSession;

	/**
	 * Returns a persistable form of the current state of this `IdCompressor` which can be rehydrated via `IdCompressor.deserialize()`.
	 * This includes finalized state as well as un-finalized state and is therefore suitable for use in offline scenarios.
	 */
	serialize(withSession: true): SerializedIdCompressorWithOngoingSession;

	/**
	 * Returns a persistable form of the current state of this `IdCompressor` which can be rehydrated via `IdCompressor.deserialize()`.
	 * This only includes finalized state and is therefore suitable for use in summaries.
	 */
	serialize(withSession: false): SerializedIdCompressorWithNoSession;
	serialize(withSession: boolean): SerializedIdCompressor;
}

/**
 * This is the set of operations on an IdCompressor that DDS author
 * would leverage. These functions allow for the generation of Ids and
 * translation between different Id spaces.
 */
export interface IIdCompressor {
	localSessionId: SessionId;

	/**
	 * Generates a new compressed ID or returns an existing one.
	 * This should ONLY be called to generate IDs for local operations.
	 * @param override - Specifies a specific string to be associated with the returned compressed ID.
	 * Performance note: assigning override strings incurs a performance overhead.
	 * @returns an existing ID if one already exists for `override`, and a new local ID otherwise. The returned ID is in session space.
	 */
	generateCompressedId(): SessionSpaceCompressedId;
	/**
	 * Normalizes a session space ID into op space.
	 * @param id - the local ID to normalize.
	 * @returns the ID in op space.
	 */
	normalizeToOpSpace(id: SessionSpaceCompressedId): OpSpaceCompressedId;
	/**
	 * Normalizes an ID into session space.
	 * @param id - the ID to normalize. If it is a local ID, it is assumed to have been created by the session corresponding
	 * to `sessionId`.
	 * @param originSessionId - the session from which `id` originated
	 * @returns the session-space ID corresponding to `id`, which might not have been a final ID if the client that created it had not yet
	 * finalized it. This can occur when a client references an ID during the window of time in which it is waiting to receive the ordered
	 * range that contained it from the server.
	 */
	normalizeToSessionSpace(
		id: OpSpaceCompressedId,
		originSessionId: SessionId,
	): SessionSpaceCompressedId;

	/**
	 * Normalizes a final ID into session space.
	 * @param id - the final ID to normalize.
	 * @returns the session-space ID corresponding to `id`.
	 */
	normalizeToSessionSpace(id: FinalCompressedId): SessionSpaceCompressedId;
	normalizeToSessionSpace(
		id: OpSpaceCompressedId,
		sessionIdIfLocal?: SessionId,
	): SessionSpaceCompressedId;

	/**
	 * Decompresses a previously compressed ID into a UUID or override string.
	 * @param id - the compressed ID to be decompressed.
	 * @returns the UUID or override string associated with the compressed ID. Fails if the ID was not generated by this compressor.
	 */
	decompress(id: SessionSpaceCompressedId | FinalCompressedId): StableId | string;

	/**
	 * Attempts to decompress a previously compressed ID into a UUID or override string.
	 * @param id - the compressed ID to be decompressed.
	 * @returns the UUID or override string associated with the compressed ID, or undefined if the ID was not generated by this compressor.
	 */
	tryDecompress(id: SessionSpaceCompressedId | FinalCompressedId): StableId | string | undefined;

	/**
	 * Recompresses a decompressed ID, which could be a UUID or an override string.
	 * @param uncompressed - the UUID or override string to recompress.
	 * @returns the `CompressedId` associated with `uncompressed`. Fails if it has not been previously compressed by this compressor.
	 */
	recompress(uncompressed: string): SessionSpaceCompressedId;

	/**
	 * Attempts to recompresses a decompressed ID, which could be a UUID or an override string.
	 * @param uncompressed - the UUID or override string to recompress,
	 * @returns the `CompressedId` associated with `uncompressed` or undefined if it has not been previously compressed by this compressor.
	 */
	tryRecompress(uncompressed: string): SessionSpaceCompressedId | undefined;
}
